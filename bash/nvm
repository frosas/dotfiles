# shellcheck shell=bash
# vim: filetype=bash

# Solutions considered
#
# https://github.com/nvm-sh/nvm (current one)
# - It automatically switches to the correct version by reading the project .nvmrc on cd
#   - That's quite slow
# - No support for .node-version (the closest to a standard project pinning file)
#   - As a workaround, a symlink from .node-version to .nvmrc can be created, or the cd wrapper can be customized to read .node-version
#
# https://github.com/tj/n
# - It changes the version globally (ie, can't have multiple shells using different versions at the same time)
# - It's very slow changing to a different version (because the copying?)
#
# https://github.com/asdf-vm/asdf
# - Similar to nvm (cd wrapper)
# - I don't need the extra features (support for other language version managers)
#
# https://volta.sh/
# - It's supposed to be faster
# - Not sure if it has the same issue as n in that it changes the version globally
# - It doesn't support reading the version from .nvmrc or similar


export NVM_DIR=~/.nvm
source /usr/local/opt/nvm/nvm.sh --no-use

# Automatically switch to the correct Node version when changing directories

# TODO How to avoid leaking these functions?

nvmrc_exists() {
	[[ "$(nvm_find_up .nvmrc)" != "" ]]
}

# A silent `nvm use` unless it fails
nvm_use_silent() {
	out=$(nvm use "$@" 2>&1) || echo "$out" >&2
}

nvm_use_relevant_version() {
	if nvmrc_exists; then
	   # Not using nvm install as it's slower and normally not required
		nvm_use_silent
	else
		nvm_use_silent system
	fi
}

cd_nvm() {
	command cd "$@" || return $?
	nvm_use_relevant_version
}

alias cd='cd_nvm'

# Trigger the version change in case the shell starts in a project with an .nvmrc
cd .