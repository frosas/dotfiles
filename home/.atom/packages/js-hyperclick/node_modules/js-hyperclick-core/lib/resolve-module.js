'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; // import url from 'url'
// import shell from 'shell'


exports.default = resolveModule;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _resolve = require('resolve');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Default comes from Node's `require.extensions`
var defaultExtensions = ['.js', '.json', '.node'];

function findPackageJson(basedir) {
    var packagePath = _path2.default.resolve(basedir, 'package.json');
    try {
        _fs2.default.accessSync(packagePath);
    } catch (e) {
        var parent = _path2.default.resolve(basedir, '../');
        if (parent != basedir) {
            return findPackageJson(parent);
        }
        return undefined;
    }
    return packagePath;
}

function loadModuleRoots(basedir) {
    var packagePath = findPackageJson(basedir);
    if (!packagePath) {
        return;
    }
    var config = JSON.parse(_fs2.default.readFileSync(packagePath));

    if (config && config.moduleRoots) {
        var _ret = function () {
            var roots = config.moduleRoots;
            if (typeof roots === 'string') {
                roots = [roots];
            }

            var packageDir = _path2.default.dirname(packagePath);
            return {
                v: roots.map(function (r) {
                    return _path2.default.resolve(packageDir, r);
                })
            };
        }();

        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
    }
}

function resolveWithCustomRoots(basedir, absoluteModule, options) {
    var _options$extensions = options.extensions,
        extensions = _options$extensions === undefined ? defaultExtensions : _options$extensions;

    var moduleName = './' + absoluteModule;

    var roots = loadModuleRoots(basedir);

    if (roots) {
        var resolveOptions = { basedir: basedir, extensions: extensions };
        for (var i = 0; i < roots.length; i++) {
            resolveOptions.basedir = roots[i];

            try {
                return (0, _resolve.sync)(moduleName, resolveOptions);
            } catch (e) {
                /* do nothing */
            }
        }
    }
}

function resolveModule(filePath, suggestion) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _options$extensions2 = options.extensions,
        extensions = _options$extensions2 === undefined ? defaultExtensions : _options$extensions2;
    var moduleName = suggestion.moduleName;


    var basedir = _path2.default.dirname(filePath);
    var resolveOptions = { basedir: basedir, extensions: extensions };

    var filename = void 0;

    try {
        filename = (0, _resolve.sync)(moduleName, resolveOptions);
        if (filename == moduleName) {
            return {
                url: 'http://nodejs.org/api/' + moduleName + '.html'
            };
        }
    } catch (e) {}
    /* do nothing */


    // Allow linking to relative files that don't exist yet.
    if (!filename && moduleName[0] === '.') {
        if (_path2.default.extname(moduleName) == '') {
            moduleName += '.js';
        }

        filename = _path2.default.join(basedir, moduleName);
    } else if (!filename) {
        filename = resolveWithCustomRoots(basedir, moduleName, options);
    }

    return { filename: filename };
}