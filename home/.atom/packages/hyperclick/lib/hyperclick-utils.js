Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.defaultWordRegExpForEditor = defaultWordRegExpForEditor;

/**
 * Returns the text and range for the word that contains the given position.
 */

exports.getWordTextAndRange = getWordTextAndRange;

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _atom = require('atom');

'use babel';

function defaultWordRegExpForEditor(textEditor) {
  var lastCursor = textEditor.getLastCursor();
  if (!lastCursor) {
    return null;
  }
  return lastCursor.wordRegExp();
}

function getWordTextAndRange(textEditor, position, wordRegExp_) {
  var wordRegExp = wordRegExp_;
  var textAndRange = null;

  wordRegExp = wordRegExp || defaultWordRegExpForEditor(textEditor);

  if (wordRegExp) {
    var buffer = textEditor.getBuffer();
    buffer.scanInRange(wordRegExp, buffer.rangeForRow(position.row), function (data) {
      if (data.range.containsPoint(position)) {
        textAndRange = {
          text: data.matchText,
          range: data.range
        };
        data.stop();
      } else if (data.range.end.column > position.column) {
        // Stop the scan if the scanner has passed our position.
        data.stop();
      }
    });
  }

  if (!textAndRange) {
    textAndRange = { text: '', range: new _atom.Range(position, position) };
  }

  return textAndRange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hc3VhcmV6L3NyYy9naXRodWIvaHlwZXJjbGljay9saWIvaHlwZXJjbGljay11dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O29CQVdvQixNQUFNOztBQVgxQixXQUFXLENBQUM7O0FBYUwsU0FBUywwQkFBMEIsQ0FDeEMsVUFBMkIsRUFDbEI7QUFDVCxNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsYUFBYSxFQUFFLENBQUM7QUFDOUMsTUFBSSxDQUFDLFVBQVUsRUFBRTtBQUNmLFdBQU8sSUFBSSxDQUFDO0dBQ2I7QUFDRCxTQUFPLFVBQVUsQ0FBQyxVQUFVLEVBQUUsQ0FBQztDQUNoQzs7QUFRTSxTQUFTLG1CQUFtQixDQUNqQyxVQUFzQixFQUN0QixRQUFvQixFQUNwQixXQUFxQixFQUNIO0FBQ2xCLE1BQUksVUFBVSxHQUFHLFdBQVcsQ0FBQztBQUM3QixNQUFJLFlBQStCLEdBQUcsSUFBSSxDQUFDOztBQUUzQyxZQUFVLEdBQUcsVUFBVSxJQUFJLDBCQUEwQixDQUFDLFVBQVUsQ0FBQyxDQUFDOztBQUVsRSxNQUFJLFVBQVUsRUFBRTtBQUNkLFFBQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztBQUN0QyxVQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxVQUFBLElBQUksRUFBSTtBQUN2RSxVQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQ3RDLG9CQUFZLEdBQUc7QUFDYixjQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVM7QUFDcEIsZUFBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1NBQ2xCLENBQUM7QUFDRixZQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7T0FDYixNQUFNLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUU7O0FBRWxELFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztPQUNiO0tBQ0YsQ0FBQyxDQUFDO0dBQ0o7O0FBRUQsTUFBSSxDQUFDLFlBQVksRUFBRTtBQUNqQixnQkFBWSxHQUFHLEVBQUMsSUFBSSxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsZ0JBQVUsUUFBUSxFQUFFLFFBQVEsQ0FBQyxFQUFDLENBQUM7R0FDakU7O0FBRUQsU0FBTyxZQUFZLENBQUM7Q0FDckIiLCJmaWxlIjoiL1VzZXJzL2FzdWFyZXovc3JjL2dpdGh1Yi9oeXBlcmNsaWNrL2xpYi9oeXBlcmNsaWNrLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4vKiBAZmxvdyAqL1xuXG4vKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIGxpY2Vuc2UgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBpblxuICogdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHtSYW5nZX0gZnJvbSAnYXRvbSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWZhdWx0V29yZFJlZ0V4cEZvckVkaXRvcihcbiAgdGV4dEVkaXRvcjogYXRvbSRUZXh0RWRpdG9yLFxuKTogP1JlZ0V4cCB7XG4gIGNvbnN0IGxhc3RDdXJzb3IgPSB0ZXh0RWRpdG9yLmdldExhc3RDdXJzb3IoKTtcbiAgaWYgKCFsYXN0Q3Vyc29yKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIGxhc3RDdXJzb3Iud29yZFJlZ0V4cCgpO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHRleHQgYW5kIHJhbmdlIGZvciB0aGUgd29yZCB0aGF0IGNvbnRhaW5zIHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAqL1xuXG50eXBlIFdvcmRUZXh0QW5kUmFuZ2UgPSB7dGV4dDogc3RyaW5nLCByYW5nZTogUmFuZ2V9O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0V29yZFRleHRBbmRSYW5nZShcbiAgdGV4dEVkaXRvcjogVGV4dEVkaXRvcixcbiAgcG9zaXRpb246IGF0b20kUG9pbnQsXG4gIHdvcmRSZWdFeHBfPzogP1JlZ0V4cCxcbik6IFdvcmRUZXh0QW5kUmFuZ2Uge1xuICBsZXQgd29yZFJlZ0V4cCA9IHdvcmRSZWdFeHBfO1xuICBsZXQgdGV4dEFuZFJhbmdlOiA/V29yZFRleHRBbmRSYW5nZSA9IG51bGw7XG5cbiAgd29yZFJlZ0V4cCA9IHdvcmRSZWdFeHAgfHwgZGVmYXVsdFdvcmRSZWdFeHBGb3JFZGl0b3IodGV4dEVkaXRvcik7XG5cbiAgaWYgKHdvcmRSZWdFeHApIHtcbiAgICBjb25zdCBidWZmZXIgPSB0ZXh0RWRpdG9yLmdldEJ1ZmZlcigpO1xuICAgIGJ1ZmZlci5zY2FuSW5SYW5nZSh3b3JkUmVnRXhwLCBidWZmZXIucmFuZ2VGb3JSb3cocG9zaXRpb24ucm93KSwgZGF0YSA9PiB7XG4gICAgICBpZiAoZGF0YS5yYW5nZS5jb250YWluc1BvaW50KHBvc2l0aW9uKSkge1xuICAgICAgICB0ZXh0QW5kUmFuZ2UgPSB7XG4gICAgICAgICAgdGV4dDogZGF0YS5tYXRjaFRleHQsXG4gICAgICAgICAgcmFuZ2U6IGRhdGEucmFuZ2UsXG4gICAgICAgIH07XG4gICAgICAgIGRhdGEuc3RvcCgpO1xuICAgICAgfSBlbHNlIGlmIChkYXRhLnJhbmdlLmVuZC5jb2x1bW4gPiBwb3NpdGlvbi5jb2x1bW4pIHtcbiAgICAgICAgLy8gU3RvcCB0aGUgc2NhbiBpZiB0aGUgc2Nhbm5lciBoYXMgcGFzc2VkIG91ciBwb3NpdGlvbi5cbiAgICAgICAgZGF0YS5zdG9wKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAoIXRleHRBbmRSYW5nZSkge1xuICAgIHRleHRBbmRSYW5nZSA9IHt0ZXh0OiAnJywgcmFuZ2U6IG5ldyBSYW5nZShwb3NpdGlvbiwgcG9zaXRpb24pfTtcbiAgfVxuXG4gIHJldHVybiB0ZXh0QW5kUmFuZ2U7XG59XG4iXX0=