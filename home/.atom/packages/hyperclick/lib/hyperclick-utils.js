Object.defineProperty(exports, '__esModule', {
  value: true
});
exports.defaultWordRegExpForEditor = defaultWordRegExpForEditor;

/**
 * Returns the text and range for the word that contains the given position.
 */

exports.getWordTextAndRange = getWordTextAndRange;

/*
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var _atom = require('atom');

'use babel';

function defaultWordRegExpForEditor(textEditor) {
  var lastCursor = textEditor.getLastCursor();
  if (!lastCursor) {
    return null;
  }
  return lastCursor.wordRegExp();
}

function getWordTextAndRange(textEditor, position, wordRegExp_) {
  var wordRegExp = wordRegExp_;
  var textAndRange = null;

  wordRegExp = wordRegExp || defaultWordRegExpForEditor(textEditor);

  if (wordRegExp) {
    var buffer = textEditor.getBuffer();
    buffer.scanInRange(wordRegExp, buffer.rangeForRow(position.row), function (data) {
      if (data.range.containsPoint(position)) {
        textAndRange = {
          text: data.matchText,
          range: data.range
        };
        data.stop();
      } else if (data.range.end.column > position.column) {
        // Stop the scan if the scanner has passed our position.
        data.stop();
      }
    });
  }

  if (!textAndRange) {
    textAndRange = { text: '', range: new _atom.Range(position, position) };
  }

  return textAndRange;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hc3VhcmV6L0Rvd25sb2Fkcy9oeXBlcmNsaWNrL2xpYi9oeXBlcmNsaWNrLXV0aWxzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBV29CLE1BQU07O0FBWDFCLFdBQVcsQ0FBQzs7QUFhTCxTQUFTLDBCQUEwQixDQUN4QyxVQUEyQixFQUNsQjtBQUNULE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUM5QyxNQUFJLENBQUMsVUFBVSxFQUFFO0FBQ2YsV0FBTyxJQUFJLENBQUM7R0FDYjtBQUNELFNBQU8sVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDO0NBQ2hDOztBQVFNLFNBQVMsbUJBQW1CLENBQ2pDLFVBQXNCLEVBQ3RCLFFBQW9CLEVBQ3BCLFdBQXFCLEVBQ0g7QUFDbEIsTUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDO0FBQzdCLE1BQUksWUFBK0IsR0FBRyxJQUFJLENBQUM7O0FBRTNDLFlBQVUsR0FBRyxVQUFVLElBQUksMEJBQTBCLENBQUMsVUFBVSxDQUFDLENBQUM7O0FBRWxFLE1BQUksVUFBVSxFQUFFO0FBQ2QsUUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLFNBQVMsRUFBRSxDQUFDO0FBQ3RDLFVBQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLFVBQUEsSUFBSSxFQUFJO0FBQ3ZFLFVBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDdEMsb0JBQVksR0FBRztBQUNiLGNBQUksRUFBRSxJQUFJLENBQUMsU0FBUztBQUNwQixlQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7U0FDbEIsQ0FBQztBQUNGLFlBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztPQUNiLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRTs7QUFFbEQsWUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO09BQ2I7S0FDRixDQUFDLENBQUM7R0FDSjs7QUFFRCxNQUFJLENBQUMsWUFBWSxFQUFFO0FBQ2pCLGdCQUFZLEdBQUcsRUFBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxnQkFBVSxRQUFRLEVBQUUsUUFBUSxDQUFDLEVBQUMsQ0FBQztHQUNqRTs7QUFFRCxTQUFPLFlBQVksQ0FBQztDQUNyQiIsImZpbGUiOiIvVXNlcnMvYXN1YXJlei9Eb3dubG9hZHMvaHlwZXJjbGljay9saWIvaHlwZXJjbGljay11dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2UgYmFiZWwnO1xuLyogQGZsb3cgKi9cblxuLypcbiAqIENvcHlyaWdodCAoYykgMjAxNS1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBsaWNlbnNlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgaW5cbiAqIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB7UmFuZ2V9IGZyb20gJ2F0b20nO1xuXG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFdvcmRSZWdFeHBGb3JFZGl0b3IoXG4gIHRleHRFZGl0b3I6IGF0b20kVGV4dEVkaXRvcixcbik6ID9SZWdFeHAge1xuICBjb25zdCBsYXN0Q3Vyc29yID0gdGV4dEVkaXRvci5nZXRMYXN0Q3Vyc29yKCk7XG4gIGlmICghbGFzdEN1cnNvcikge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHJldHVybiBsYXN0Q3Vyc29yLndvcmRSZWdFeHAoKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB0ZXh0IGFuZCByYW5nZSBmb3IgdGhlIHdvcmQgdGhhdCBjb250YWlucyB0aGUgZ2l2ZW4gcG9zaXRpb24uXG4gKi9cblxudHlwZSBXb3JkVGV4dEFuZFJhbmdlID0ge3RleHQ6IHN0cmluZywgcmFuZ2U6IFJhbmdlfTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFdvcmRUZXh0QW5kUmFuZ2UoXG4gIHRleHRFZGl0b3I6IFRleHRFZGl0b3IsXG4gIHBvc2l0aW9uOiBhdG9tJFBvaW50LFxuICB3b3JkUmVnRXhwXz86ID9SZWdFeHAsXG4pOiBXb3JkVGV4dEFuZFJhbmdlIHtcbiAgbGV0IHdvcmRSZWdFeHAgPSB3b3JkUmVnRXhwXztcbiAgbGV0IHRleHRBbmRSYW5nZTogP1dvcmRUZXh0QW5kUmFuZ2UgPSBudWxsO1xuXG4gIHdvcmRSZWdFeHAgPSB3b3JkUmVnRXhwIHx8IGRlZmF1bHRXb3JkUmVnRXhwRm9yRWRpdG9yKHRleHRFZGl0b3IpO1xuXG4gIGlmICh3b3JkUmVnRXhwKSB7XG4gICAgY29uc3QgYnVmZmVyID0gdGV4dEVkaXRvci5nZXRCdWZmZXIoKTtcbiAgICBidWZmZXIuc2NhbkluUmFuZ2Uod29yZFJlZ0V4cCwgYnVmZmVyLnJhbmdlRm9yUm93KHBvc2l0aW9uLnJvdyksIGRhdGEgPT4ge1xuICAgICAgaWYgKGRhdGEucmFuZ2UuY29udGFpbnNQb2ludChwb3NpdGlvbikpIHtcbiAgICAgICAgdGV4dEFuZFJhbmdlID0ge1xuICAgICAgICAgIHRleHQ6IGRhdGEubWF0Y2hUZXh0LFxuICAgICAgICAgIHJhbmdlOiBkYXRhLnJhbmdlLFxuICAgICAgICB9O1xuICAgICAgICBkYXRhLnN0b3AoKTtcbiAgICAgIH0gZWxzZSBpZiAoZGF0YS5yYW5nZS5lbmQuY29sdW1uID4gcG9zaXRpb24uY29sdW1uKSB7XG4gICAgICAgIC8vIFN0b3AgdGhlIHNjYW4gaWYgdGhlIHNjYW5uZXIgaGFzIHBhc3NlZCBvdXIgcG9zaXRpb24uXG4gICAgICAgIGRhdGEuc3RvcCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCF0ZXh0QW5kUmFuZ2UpIHtcbiAgICB0ZXh0QW5kUmFuZ2UgPSB7dGV4dDogJycsIHJhbmdlOiBuZXcgUmFuZ2UocG9zaXRpb24sIHBvc2l0aW9uKX07XG4gIH1cblxuICByZXR1cm4gdGV4dEFuZFJhbmdlO1xufVxuIl19