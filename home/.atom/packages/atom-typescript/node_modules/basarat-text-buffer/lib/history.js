(function() {
  var Checkpoint, History, SerializationVersion;

  SerializationVersion = 2;

  Checkpoint = (function() {
    function Checkpoint(id, snapshot) {
      this.id = id;
      this.snapshot = snapshot;
    }

    return Checkpoint;

  })();

  module.exports = History = (function() {
    History.deserialize = function(delegate, state) {
      var history;
      history = new History(delegate);
      history.deserialize(state);
      return history;
    };

    function History(delegate) {
      this.delegate = delegate;
      this.nextCheckpointId = 0;
      this.undoStack = [];
      this.redoStack = [];
    }

    History.prototype.createCheckpoint = function(snapshot) {
      var checkpoint;
      checkpoint = new Checkpoint(this.nextCheckpointId++, snapshot);
      this.undoStack.push(checkpoint);
      return checkpoint.id;
    };

    History.prototype.groupChangesSinceCheckpoint = function(checkpointId) {
      var checkpointIndex, entry, i, _i, _ref;
      checkpointIndex = this.getCheckpointIndex(checkpointId);
      if (checkpointIndex == null) {
        return false;
      }
      _ref = this.undoStack;
      for (i = _i = _ref.length - 1; _i >= 0; i = _i += -1) {
        entry = _ref[i];
        if (i === checkpointIndex) {
          break;
        }
        if (this.undoStack[i] instanceof Checkpoint) {
          this.undoStack.splice(i, 1);
        }
      }
      return true;
    };

    History.prototype.applyCheckpointGroupingInterval = function(checkpointId, groupingInterval) {
      var checkpoint, checkpointIndex, entry, groupedCheckpoint, i, now, _i, _ref;
      if (groupingInterval === 0) {
        return;
      }
      checkpointIndex = this.getCheckpointIndex(checkpointId);
      checkpoint = this.undoStack[checkpointIndex];
      if (checkpointIndex == null) {
        return;
      }
      now = Date.now();
      groupedCheckpoint = null;
      for (i = _i = _ref = checkpointIndex - 1; _i >= 0; i = _i += -1) {
        entry = this.undoStack[i];
        if (entry instanceof Checkpoint) {
          if ((entry.timestamp + Math.min(entry.groupingInterval, groupingInterval)) >= now) {
            this.undoStack.splice(checkpointIndex, 1);
            groupedCheckpoint = entry;
          } else {
            groupedCheckpoint = checkpoint;
          }
          break;
        }
      }
      if (groupedCheckpoint != null) {
        groupedCheckpoint.timestamp = now;
        return groupedCheckpoint.groupingInterval = groupingInterval;
      }
    };

    History.prototype.pushChange = function(change) {
      this.undoStack.push(change);
      return this.clearRedoStack();
    };

    History.prototype.popUndoStack = function(snapshot) {
      var change, checkpointIndex, result;
      if ((checkpointIndex = this.getBoundaryCheckpointIndex(this.undoStack)) != null) {
        this.redoStack.push(new Checkpoint(this.nextCheckpointId++, snapshot));
        result = this.popChanges(this.undoStack, this.redoStack, checkpointIndex);
        result.changes = (function() {
          var _i, _len, _ref, _results;
          _ref = result.changes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            change = _ref[_i];
            _results.push(this.delegate.invertChange(change));
          }
          return _results;
        }).call(this);
        return result;
      } else {
        return false;
      }
    };

    History.prototype.popRedoStack = function(snapshot) {
      var checkpointIndex;
      if ((checkpointIndex = this.getBoundaryCheckpointIndex(this.redoStack)) != null) {
        this.undoStack.push(new Checkpoint(this.nextCheckpointId++, snapshot));
        return this.popChanges(this.redoStack, this.undoStack, checkpointIndex);
      } else {
        return false;
      }
    };

    History.prototype.truncateUndoStack = function(checkpointId) {
      var change, checkpointIndex, result;
      if ((checkpointIndex = this.getCheckpointIndex(checkpointId)) != null) {
        result = this.popChanges(this.undoStack, null, checkpointIndex);
        result.changes = (function() {
          var _i, _len, _ref, _results;
          _ref = result.changes;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            change = _ref[_i];
            _results.push(this.delegate.invertChange(change));
          }
          return _results;
        }).call(this);
        return result;
      } else {
        return false;
      }
    };

    History.prototype.clearUndoStack = function() {
      return this.undoStack.length = 0;
    };

    History.prototype.clearRedoStack = function() {
      return this.redoStack.length = 0;
    };

    History.prototype.serialize = function() {
      return {
        version: SerializationVersion,
        nextCheckpointId: this.nextCheckpointId,
        undoStack: this.serializeStack(this.undoStack),
        redoStack: this.serializeStack(this.redoStack)
      };
    };

    History.prototype.deserialize = function(state) {
      if (state.version !== SerializationVersion) {
        return;
      }
      this.nextCheckpointId = state.nextCheckpointId;
      this.undoStack = this.deserializeStack(state.undoStack);
      return this.redoStack = this.deserializeStack(state.redoStack);
    };


    /*
    Section: Private
     */

    History.prototype.getCheckpointIndex = function(checkpointId) {
      var entry, i, _i, _ref;
      _ref = this.undoStack;
      for (i = _i = _ref.length - 1; _i >= 0; i = _i += -1) {
        entry = _ref[i];
        if (entry instanceof Checkpoint && entry.id === checkpointId) {
          return i;
        }
      }
      return null;
    };

    History.prototype.getBoundaryCheckpointIndex = function(stack) {
      var entry, hasSeenChanges, i, _i;
      hasSeenChanges = false;
      for (i = _i = stack.length - 1; _i >= 0; i = _i += -1) {
        entry = stack[i];
        if (entry instanceof Checkpoint) {
          if (hasSeenChanges) {
            return i;
          }
        } else {
          hasSeenChanges = true;
        }
      }
      return null;
    };

    History.prototype.popChanges = function(fromStack, toStack, checkpointIndex) {
      var changes, entry, snapshot, _i, _ref;
      changes = [];
      snapshot = fromStack[checkpointIndex].snapshot;
      _ref = fromStack.splice(checkpointIndex);
      for (_i = _ref.length - 1; _i >= 0; _i += -1) {
        entry = _ref[_i];
        if (toStack != null) {
          toStack.push(entry);
        }
        if (!(entry instanceof Checkpoint)) {
          changes.push(entry);
        }
      }
      return {
        changes: changes,
        snapshot: snapshot
      };
    };

    History.prototype.serializeStack = function(stack) {
      var entry, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = stack.length; _i < _len; _i++) {
        entry = stack[_i];
        if (entry instanceof Checkpoint) {
          _results.push({
            type: 'checkpoint',
            id: entry.id,
            snapshot: this.delegate.serializeSnapshot(entry.snapshot)
          });
        } else {
          _results.push({
            type: 'change',
            content: this.delegate.serializeChange(entry)
          });
        }
      }
      return _results;
    };

    History.prototype.deserializeStack = function(stack) {
      var entry, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = stack.length; _i < _len; _i++) {
        entry = stack[_i];
        switch (entry.type) {
          case 'checkpoint':
            _results.push(new Checkpoint(entry.id, this.delegate.deserializeSnapshot(entry.snapshot)));
            break;
          case 'change':
            _results.push(this.delegate.deserializeChange(entry.content));
            break;
          default:
            _results.push(void 0);
        }
      }
      return _results;
    };

    return History;

  })();

}).call(this);
