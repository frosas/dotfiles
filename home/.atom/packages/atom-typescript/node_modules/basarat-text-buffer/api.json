{
  "classes": {
    "Point": {
      "name": "Point",
      "filename": "src\\point.coffee",
      "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L14",
      "sections": [
        {
          "name": "Properties",
          "description": ""
        },
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Comparison",
          "description": ""
        },
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Operations",
          "description": ""
        },
        {
          "name": "Comparison",
          "description": ""
        },
        {
          "name": "Conversion",
          "description": ""
        }
      ],
      "classMethods": [
        {
          "name": "fromObject",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L38",
          "visibility": "Public",
          "summary": "Convert any point-compatible object to a {Point}.",
          "description": "Convert any point-compatible object to a {Point}.",
          "arguments": [
            {
              "name": "object",
              "description": "This can be an object that's already a {Point}, in which case it's simply returned, or an array containing two {Number}s representing the row and column.",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "copy",
              "description": "An optional boolean indicating whether to force the copying of objects that are already points.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns: A {Point} based on the given object."
            }
          ]
        },
        {
          "name": "min",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L57",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "point1",
              "description": "{Point}",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "point2",
              "description": "{Point} ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns the given {Point} that is earlier in the buffer."
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L85",
          "visibility": "Public",
          "summary": "Construct a {Point} object",
          "description": "Construct a {Point} object",
          "arguments": [
            {
              "name": "row",
              "description": "{Number} row",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "column",
              "description": "{Number} column ",
              "type": "Number",
              "isOptional": false
            }
          ]
        },
        {
          "name": "copy",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L92",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a new {Point} with the same row and column."
            }
          ]
        },
        {
          "name": "negate",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L96",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a new {Point} with the row and column negated."
            }
          ]
        },
        {
          "name": "freeze",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L106",
          "visibility": "Public",
          "summary": "Makes this point immutable and returns itself.",
          "description": "Makes this point immutable and returns itself.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns an immutable version of this {Point}"
            }
          ]
        },
        {
          "name": "translate",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L116",
          "visibility": "Public",
          "summary": "Build and return a new point by adding the rows and columns of\nthe given point.",
          "description": "Build and return a new point by adding the rows and columns of\nthe given point.",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} whose row and column will be added to this point's row and column to build the returned point.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "traverse",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L140",
          "visibility": "Public",
          "summary": "Build and return a new {Point} by traversing the rows and columns\nspecified by the given point.",
          "description": "Build and return a new {Point} by traversing the rows and columns\nspecified by the given point.\n\nThis method differs from the direct, vector-style addition offered by\n{::translate}. Rather than adding the rows and columns directly, it derives\nthe new point from traversing in \"typewriter space\". At the end of every row\ntraversed, a carriage return occurs that returns the columns to 0 before\ncontinuing the traversal.",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} providing the rows and columns to traverse by.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "compare",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L179",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns `-1` if this point precedes the argument."
            },
            {
              "type": null,
              "description": "Returns `0` if this point is equivalent to the argument."
            },
            {
              "type": null,
              "description": "Returns `1` if this point follows the argument."
            }
          ]
        },
        {
          "name": "isEqual",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L196",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}. ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this point has the same row\nand column as the given {Point} or point-compatible {Array}."
            }
          ]
        },
        {
          "name": "isLessThan",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L205",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}. ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this point precedes the given\n{Point} or point-compatible {Array}."
            }
          ]
        },
        {
          "name": "isLessThanOrEqual",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L212",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}. ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this point precedes or is\nequal to the given {Point} or point-compatible {Array}."
            }
          ]
        },
        {
          "name": "isGreaterThan",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L219",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}. ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this point follows the given\n{Point} or point-compatible {Array}."
            }
          ]
        },
        {
          "name": "isGreaterThanOrEqual",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L226",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "other",
              "description": "A {Point} or point-compatible {Array}. ",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this point follows or is\nequal to the given {Point} or point-compatible {Array}."
            }
          ]
        },
        {
          "name": "toArray",
          "sectionName": "Conversion",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L253",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns an array of this point's row and column."
            }
          ]
        },
        {
          "name": "serialize",
          "sectionName": "Conversion",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L257",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns an array of this point's row and column."
            }
          ]
        },
        {
          "name": "toString",
          "sectionName": "Conversion",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L261",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a string representation of the point."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "row",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L20",
          "visibility": "Public",
          "summary": "A zero-indexed {Number} representing the row of the {Point}. ",
          "description": "A zero-indexed {Number} representing the row of the {Point}. "
        },
        {
          "name": "column",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\point.coffee#L23",
          "visibility": "Public",
          "summary": "A zero-indexed {Number} representing the column of the {Point}. ",
          "description": "A zero-indexed {Number} representing the column of the {Point}. "
        }
      ],
      "visibility": "Public",
      "summary": "Represents a point in a buffer in row/column coordinates.",
      "description": "Represents a point in a buffer in row/column coordinates.\n\nEvery public method that takes a point also accepts a *point-compatible*\n{Array}. This means a 2-element array containing {Number}s representing the\nrow and column. So the following are equivalent:\n\n```coffee\nnew Point(1, 2)\n[1, 2] # Point compatible Array\n```"
    },
    "Range": {
      "name": "Range",
      "filename": "src\\range.coffee",
      "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L19",
      "sections": [
        {
          "name": "Properties",
          "description": ""
        },
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Serialization and Deserialization",
          "description": ""
        },
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Serialization and Deserialization",
          "description": ""
        },
        {
          "name": "Range Details",
          "description": ""
        },
        {
          "name": "Operations",
          "description": ""
        },
        {
          "name": "Comparison",
          "description": ""
        },
        {
          "name": "Conversion",
          "description": ""
        }
      ],
      "classMethods": [
        {
          "name": "fromObject",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L43",
          "visibility": "Public",
          "summary": "Convert any range-compatible object to a {Range}.",
          "description": "Convert any range-compatible object to a {Range}.",
          "arguments": [
            {
              "name": "object",
              "description": "This can be an object that's already a {Range}, in which case it's simply returned, or an array containing two {Point}s or point-compatible arrays.",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "copy",
              "description": "An optional boolean indicating whether to force the copying of objects that are already ranges.˚",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns: A {Range} based on the given object."
            }
          ]
        },
        {
          "name": "deserialize",
          "sectionName": "Serialization and Deserialization",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L96",
          "visibility": "Public",
          "summary": "Call this with the result of {Range::serialize} to construct a new Range.",
          "description": "Call this with the result of {Range::serialize} to construct a new Range.",
          "arguments": [
            {
              "name": "array",
              "description": "{Array} of params to pass to the {::constructor} ",
              "type": "Array",
              "isOptional": false
            }
          ]
        }
      ],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L110",
          "visibility": "Public",
          "summary": "Construct a {Range} object",
          "description": "Construct a {Range} object",
          "arguments": [
            {
              "name": "pointA",
              "description": "{Point} or Point compatible {Array} (default: [0,0])",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "pointB",
              "description": "{Point} or Point compatible {Array} (default: [0,0]) ",
              "type": "Point",
              "isOptional": false
            }
          ]
        },
        {
          "name": "copy",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L125",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a new range with the same start and end positions."
            }
          ]
        },
        {
          "name": "negate",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L129",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a new range with the start and end positions negated."
            }
          ]
        },
        {
          "name": "serialize",
          "sectionName": "Serialization and Deserialization",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L137",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a plain javascript object representation of the range."
            }
          ]
        },
        {
          "name": "isEmpty",
          "sectionName": "Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L147",
          "visibility": "Public",
          "summary": "Is the start position of this range equal to the end position?",
          "description": "Is the start position of this range equal to the end position?",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "isSingleLine",
          "sectionName": "Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L152",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range starts and ends on\nthe same row."
            }
          ]
        },
        {
          "name": "getRowCount",
          "sectionName": "Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L158",
          "visibility": "Public",
          "summary": "Get the number of rows in this range.",
          "description": "Get the number of rows in this range.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "getRows",
          "sectionName": "Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L162",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns an array of all rows in the range."
            }
          ]
        },
        {
          "name": "freeze",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L173",
          "visibility": "Public",
          "summary": "Freezes the range and its start and end point so it becomes\nimmutable and returns itself.",
          "description": "Freezes the range and its start and end point so it becomes\nimmutable and returns itself.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns an immutable version of this {Range}"
            }
          ]
        },
        {
          "name": "union",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L181",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array} ",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns a new range that contains this range and the given range."
            }
          ]
        },
        {
          "name": "translate",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L194",
          "visibility": "Public",
          "summary": "Build and return a new range by translating this range's start and\nend points by the given delta(s).",
          "description": "Build and return a new range by translating this range's start and\nend points by the given delta(s).",
          "arguments": [
            {
              "name": "startDelta",
              "description": "A {Point} by which to translate the start of this range.",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "endDelta",
              "description": "A {Point} to by which to translate the end of this range. If omitted, the `startDelta` will be used instead.",
              "type": "Point",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "traverse",
          "sectionName": "Operations",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L206",
          "visibility": "Public",
          "summary": "Build and return a new range by traversing this range's start and\nend points by the given delta.",
          "description": "Build and return a new range by traversing this range's start and\nend points by the given delta.\n\nSee {Point::traverse} for details of how traversal differs from translation.",
          "arguments": [
            {
              "name": "delta",
              "description": "A {Point} containing the rows and columns to traverse to derive the new range.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "compare",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L220",
          "visibility": "Public",
          "summary": "Compare two Ranges",
          "description": "Compare two Ranges",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array}.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": null,
              "description": "Returns `-1` if this range starts before the argument or contains it."
            },
            {
              "type": null,
              "description": "Returns `0` if this range is equivalent to the argument."
            },
            {
              "type": null,
              "description": "Returns `1` if this range starts after the argument or is contained by it."
            }
          ]
        },
        {
          "name": "isEqual",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L231",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array}. ",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range has the same start\nand end points as the given {Range} or range-compatible {Array}."
            }
          ]
        },
        {
          "name": "coversSameRows",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L240",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array}. ",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range starts and ends on\nthe same row as the argument."
            }
          ]
        },
        {
          "name": "intersectsWith",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L250",
          "visibility": "Public",
          "summary": "Determines whether this range intersects with the argument.",
          "description": "Determines whether this range intersects with the argument.",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "exclusive",
              "description": "{Boolean} indicating whether to exclude endpoints   when testing for intersection. Defaults to `false`.",
              "type": "Boolean",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "containsRange",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L262",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "otherRange",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "exclusive",
              "description": "A boolean value including that the containment should be exclusive of endpoints. Defaults to false. ",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range contains the given\nrange."
            }
          ]
        },
        {
          "name": "containsPoint",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L272",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "point",
              "description": "A {Point} or point-compatible {Array}",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "exclusive",
              "description": "A boolean value including that the containment should be exclusive of endpoints. Defaults to false. ",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range contains the given\npoint."
            }
          ]
        },
        {
          "name": "intersectsRow",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L288",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "row",
              "description": "Row {Number} ",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range intersects the\ngiven row {Number}."
            }
          ]
        },
        {
          "name": "intersectsRowRange",
          "sectionName": "Comparison",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L296",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "arguments": [
            {
              "name": "startRow",
              "description": "{Number} start row",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "endRow",
              "description": "{Number} end row ",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether this range intersects the\nrow range indicated by the given startRow and endRow {Number}s."
            }
          ]
        },
        {
          "name": "toString",
          "sectionName": "Conversion",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L316",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a string representation of the range."
            }
          ]
        }
      ],
      "classProperties": [],
      "instanceProperties": [
        {
          "name": "start",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L25",
          "visibility": "Public",
          "summary": "A {Point} representing the start of the {Range}. ",
          "description": "A {Point} representing the start of the {Range}. "
        },
        {
          "name": "end",
          "sectionName": "Properties",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\range.coffee#L28",
          "visibility": "Public",
          "summary": "A {Point} representing the end of the {Range}. ",
          "description": "A {Point} representing the end of the {Range}. "
        }
      ],
      "visibility": "Public",
      "summary": "Represents a region in a buffer in row/column coordinates.",
      "description": "Represents a region in a buffer in row/column coordinates.\n\nEvery public method that takes a range also accepts a *range-compatible*\n{Array}. This means a 2-element array containing {Point}s or point-compatible\narrays. So the following are equivalent:",
      "examples": [
        {
          "description": "",
          "lang": "coffee",
          "code": "new Range(new Point(0, 1), new Point(2, 3))\nnew Range([0, 1], [2, 3])\n[[0, 1], [2, 3]] # Range compatible array",
          "raw": "```coffee\nnew Range(new Point(0, 1), new Point(2, 3))\nnew Range([0, 1], [2, 3])\n[[0, 1], [2, 3]] # Range compatible array\n```"
        }
      ]
    },
    "TextBuffer": {
      "name": "TextBuffer",
      "filename": "src\\text-buffer.coffee",
      "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L20",
      "sections": [
        {
          "name": "Construction",
          "description": ""
        },
        {
          "name": "Event Subscription",
          "description": ""
        },
        {
          "name": "File Details",
          "description": ""
        },
        {
          "name": "Reading Text",
          "description": ""
        },
        {
          "name": "Mutating Text",
          "description": ""
        },
        {
          "name": "Markers",
          "description": ""
        },
        {
          "name": "History",
          "description": ""
        },
        {
          "name": "Search And Replace",
          "description": ""
        },
        {
          "name": "Buffer Range Details",
          "description": ""
        },
        {
          "name": "Buffer Operations",
          "description": ""
        }
      ],
      "classMethods": [],
      "instanceMethods": [
        {
          "name": "constructor",
          "sectionName": "Construction",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L48",
          "visibility": "Public",
          "summary": "Create a new buffer with the given params.",
          "description": "Create a new buffer with the given params.",
          "arguments": [
            {
              "children": [
                {
                  "name": "load",
                  "description": "A {Boolean}, `true` to asynchronously load the buffer from disk after initialization.",
                  "type": "Boolean",
                  "isOptional": false
                },
                {
                  "name": "text",
                  "description": "The initial {String} text of the buffer. ",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "params",
              "description": "{Object} or {String} of text",
              "type": "Object",
              "isOptional": false
            }
          ]
        },
        {
          "name": "onWillChange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L104",
          "visibility": "Public",
          "summary": "Invoke the given callback synchronously _before_ the content of the\nbuffer changes.",
          "description": "Invoke the given callback synchronously _before_ the content of the\nbuffer changes.\n\nBecause observers are invoked synchronously, it's important not to perform\nany expensive operations via this method.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "oldRange",
                      "description": "{Range} of the old text.",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "newRange",
                      "description": "{Range} of the new text.",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "oldText",
                      "description": "{String} containing the text that was replaced.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "newText",
                      "description": "{String} containing the text that was inserted.",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the buffer changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChange",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L122",
          "visibility": "Public",
          "summary": "Invoke the given callback synchronously when the content of the\nbuffer changes.",
          "description": "Invoke the given callback synchronously when the content of the\nbuffer changes.\n\nBecause observers are invoked synchronously, it's important not to perform\nany expensive operations via this method. Consider {::onDidStopChanging} to\ndelay expensive operations until after changes stop occurring.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "oldRange",
                      "description": "{Range} of the old text.",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "newRange",
                      "description": "{Range} of the new text.",
                      "type": "Range",
                      "isOptional": false
                    },
                    {
                      "name": "oldText",
                      "description": "{String} containing the text that was replaced.",
                      "type": "String",
                      "isOptional": false
                    },
                    {
                      "name": "newText",
                      "description": "{String} containing the text that was inserted.",
                      "type": "String",
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the buffer changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidStopChanging",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L139",
          "visibility": "Public",
          "summary": "Invoke the given callback asynchronously following one or more\nchanges after {::getStoppedChangingDelay} milliseconds elapse without an\nadditional change.",
          "description": "Invoke the given callback asynchronously following one or more\nchanges after {::getStoppedChangingDelay} milliseconds elapse without an\nadditional change.\n\nThis method can be used to perform potentially expensive operations that\ndon't need to be performed synchronously. If you need to run your callback\nsynchronously, use {::onDidChange} instead.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the buffer stops changing.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidConflict",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L148",
          "visibility": "Public",
          "summary": "Invoke the given callback when the in-memory contents of the\nbuffer become in conflict with the contents of the file on disk.",
          "description": "Invoke the given callback when the in-memory contents of the\nbuffer become in conflict with the contents of the file on disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the buffer enters conflict.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeModified",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L157",
          "visibility": "Public",
          "summary": "Invoke the given callback the value of {::isModified} changes.",
          "description": "Invoke the given callback the value of {::isModified} changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "modified",
                  "description": "{Boolean} indicating whether the buffer is modified.",
                  "type": "Boolean",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when {::isModified} changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidUpdateMarkers",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L178",
          "visibility": "Public",
          "summary": "Invoke the given callback when all marker `::onDidChange`\nobservers have been notified following a change to the buffer.",
          "description": "Invoke the given callback when all marker `::onDidChange`\nobservers have been notified following a change to the buffer.\n\nThe order of events following a buffer change is as follows:\n\n* The text of the buffer is changed\n* All markers are updated accordingly, but their `::onDidChange` observers\n  are not notified.\n* `TextBuffer::onDidChange` observers are notified.\n* `Marker::onDidChange` observers are notified.\n* `TextBuffer::onDidUpdateMarkers` observers are notified.\n\nBasically, this method gives you a way to take action after both a buffer\nchange and all associated marker changes.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called after markers are updated.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidCreateMarker",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L187",
          "visibility": "Public",
          "summary": "Invoke the given callback when a marker is created.",
          "description": "Invoke the given callback when a marker is created.",
          "arguments": [
            {
              "children": [
                {
                  "name": "marker",
                  "description": "{Marker} that was created.",
                  "type": "Marker",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when a marker is created.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangePath",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L196",
          "visibility": "Public",
          "summary": "Invoke the given callback when the value of {::getPath} changes.",
          "description": "Invoke the given callback when the value of {::getPath} changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "path",
                  "description": "{String} representing the buffer's current path on disk.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the path changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidChangeEncoding",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L205",
          "visibility": "Public",
          "summary": "Invoke the given callback when the value of {::getEncoding} changes.",
          "description": "Invoke the given callback when the value of {::getEncoding} changes.",
          "arguments": [
            {
              "children": [
                {
                  "name": "encoding",
                  "description": "{String} character set encoding of the buffer.",
                  "type": "String",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called when the encoding changes.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillSave",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L213",
          "visibility": "Public",
          "summary": "Invoke the given callback before the buffer is saved to disk.",
          "description": "Invoke the given callback before the buffer is saved to disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called before the buffer is saved.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidSave",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L223",
          "visibility": "Public",
          "summary": "Invoke the given callback after the buffer is saved to disk.",
          "description": "Invoke the given callback after the buffer is saved to disk.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "path",
                      "description": "The path to which the buffer was saved.",
                      "type": null,
                      "isOptional": false
                    }
                  ],
                  "name": "event",
                  "description": "{Object} with the following keys:",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} to be called after the buffer is saved.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDelete",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L233",
          "visibility": "Public",
          "summary": "Invoke the given callback after the file backing the buffer is\ndeleted.",
          "description": "Invoke the given callback after the file backing the buffer is\ndeleted.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called after the buffer is deleted.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillReload",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L242",
          "visibility": "Public",
          "summary": "Invoke the given callback before the buffer is reloaded from the\ncontents of its file on disk.",
          "description": "Invoke the given callback before the buffer is reloaded from the\ncontents of its file on disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called before the buffer is reloaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidReload",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L251",
          "visibility": "Public",
          "summary": "Invoke the given callback after the buffer is reloaded from the\ncontents of its file on disk.",
          "description": "Invoke the given callback after the buffer is reloaded from the\ncontents of its file on disk.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called after the buffer is reloaded.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onDidDestroy",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L259",
          "visibility": "Public",
          "summary": "Invoke the given callback when the buffer is destroyed.",
          "description": "Invoke the given callback when the buffer is destroyed.",
          "arguments": [
            {
              "name": "callback",
              "description": "{Function} to be called when the buffer is destroyed.",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "onWillThrowWatchError",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L272",
          "visibility": "Public",
          "summary": "Invoke the given callback when there is an error in watching the\nfile.",
          "description": "Invoke the given callback when there is an error in watching the\nfile.",
          "arguments": [
            {
              "children": [
                {
                  "children": [
                    {
                      "name": "error",
                      "description": "{Object} the error object",
                      "type": "Object",
                      "isOptional": false
                    },
                    {
                      "name": "handle",
                      "description": "{Function} call this to indicate you have handled the error. The error will not be thrown if this function is called.",
                      "type": "Function",
                      "isOptional": false
                    }
                  ],
                  "name": "errorObject",
                  "description": "{Object}",
                  "type": "Object",
                  "isOptional": false
                }
              ],
              "name": "callback",
              "description": "{Function} callback",
              "type": "Function",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Disposable",
              "description": "Returns a {Disposable} on which `.dispose()` can be called to unsubscribe."
            }
          ]
        },
        {
          "name": "getStoppedChangingDelay",
          "sectionName": "Event Subscription",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L279",
          "visibility": "Public",
          "summary": "Get the number of milliseconds that will elapse without a change\nbefore {::onDidStopChanging} observers are invoked following a change.",
          "description": "Get the number of milliseconds that will elapse without a change\nbefore {::onDidStopChanging} observers are invoked following a change.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "isModified",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L291",
          "visibility": "Public",
          "summary": "Determine if the in-memory contents of the buffer differ from its\ncontents on disk.",
          "description": "Determine if the in-memory contents of the buffer differ from its\ncontents on disk.\n\nIf the buffer is unsaved, always returns `true` unless the buffer is empty.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "isInConflict",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L305",
          "visibility": "Public",
          "summary": "Determine if the in-memory contents of the buffer conflict with the\non-disk contents of its associated file.",
          "description": "Determine if the in-memory contents of the buffer conflict with the\non-disk contents of its associated file.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getPath",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L310",
          "visibility": "Public",
          "summary": "Get the path of the associated file.",
          "description": "Get the path of the associated file.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "setPath",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L316",
          "visibility": "Public",
          "summary": "Set the path for the buffer's associated file.",
          "description": "Set the path for the buffer's associated file.",
          "arguments": [
            {
              "name": "filePath",
              "description": "A {String} representing the new file path ",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "setEncoding",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L332",
          "visibility": "Public",
          "summary": "Sets the character set encoding for this buffer.",
          "description": "Sets the character set encoding for this buffer.",
          "arguments": [
            {
              "name": "encoding",
              "description": "The {String} encoding to use (default: 'utf8'). ",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "getEncoding",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L350",
          "visibility": "Public",
          "summary": "",
          "description": "",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns the {String} encoding of this buffer."
            }
          ]
        },
        {
          "name": "getUri",
          "sectionName": "File Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L355",
          "visibility": "Public",
          "summary": "Get the path of the associated file.",
          "description": "Get the path of the associated file.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "isEmpty",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L374",
          "visibility": "Public",
          "summary": "Determine whether the buffer is empty.",
          "description": "Determine whether the buffer is empty.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "getText",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L380",
          "visibility": "Public",
          "summary": "Get the entire text of the buffer.",
          "description": "Get the entire text of the buffer.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "getTextInRange",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L394",
          "visibility": "Public",
          "summary": "Get the text in a range.",
          "description": "Get the text in a range.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range}",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}"
            }
          ]
        },
        {
          "name": "getLines",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L418",
          "visibility": "Public",
          "summary": "Get the text of all lines in the buffer, without their line endings.",
          "description": "Get the text of all lines in the buffer, without their line endings.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {String}s."
            }
          ]
        },
        {
          "name": "getLastLine",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L425",
          "visibility": "Public",
          "summary": "Get the text of the last line of the buffer, without its line\nending.",
          "description": "Get the text of the last line of the buffer, without its line\nending.",
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "lineForRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L433",
          "visibility": "Public",
          "summary": "Get the text of the line at the given row, without its line ending.",
          "description": "Get the text of the line at the given row, without its line ending.",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} representing a 0-indexed row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}."
            }
          ]
        },
        {
          "name": "lineEndingForRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L443",
          "visibility": "Public",
          "summary": "Get the line ending for the given 0-indexed row.",
          "description": "Get the line ending for the given 0-indexed row.",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} indicating the row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "String",
              "description": "Returns a {String}. The returned newline is represented as a literal string:\n`'\\n'`, `'\\r'`, `'\\r\\n'`, or `''` for the last line of the buffer, which\ndoesn't end in a newline."
            }
          ]
        },
        {
          "name": "lineLengthForRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L452",
          "visibility": "Public",
          "summary": "Get the length of the line for the given 0-indexed row, without its\nline ending.",
          "description": "Get the length of the line for the given 0-indexed row, without its\nline ending.",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} indicating the row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "isRowBlank",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L460",
          "visibility": "Public",
          "summary": "Determine if the given row contains only whitespace.",
          "description": "Determine if the given row contains only whitespace.",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} representing a 0-indexed row.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean}."
            }
          ]
        },
        {
          "name": "previousNonBlankRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L468",
          "visibility": "Public",
          "summary": "Given a row, find the first preceding row that's not blank.",
          "description": "Given a row, find the first preceding row that's not blank.",
          "arguments": [
            {
              "name": "startRow",
              "description": "A {Number} identifying the row to start checking at.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} or `null` if there's no preceding non-blank row."
            }
          ]
        },
        {
          "name": "nextNonBlankRow",
          "sectionName": "Reading Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L481",
          "visibility": "Public",
          "summary": "Given a row, find the next row that's not blank.",
          "description": "Given a row, find the next row that's not blank.",
          "arguments": [
            {
              "name": "startRow",
              "description": "A {Number} identifying the row to start checking at.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} or `null` if there's no next non-blank row."
            }
          ]
        },
        {
          "name": "setText",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L497",
          "visibility": "Public",
          "summary": "Replace the entire contents of the buffer with the given text.",
          "description": "Replace the entire contents of the buffer with the given text.",
          "arguments": [
            {
              "name": "text",
              "description": "A {String}",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range} spanning the new buffer contents."
            }
          ]
        },
        {
          "name": "setTextViaDiff",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L504",
          "visibility": "Public",
          "summary": "Replace the current buffer contents by applying a diff based on the\ngiven text.",
          "description": "Replace the current buffer contents by applying a diff based on the\ngiven text.",
          "arguments": [
            {
              "name": "text",
              "description": "A {String} containing the new buffer contents. ",
              "type": "String",
              "isOptional": false
            }
          ]
        },
        {
          "name": "setTextInRange",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L558",
          "visibility": "Public",
          "summary": "Set the text in the given range.",
          "description": "Set the text in the given range.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range}",
              "type": "Range",
              "isOptional": false
            },
            {
              "name": "text",
              "description": "A {String}",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "normalizeLineEndings",
                  "description": "{Boolean} (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "undo",
                  "description": "{String} 'skip' will skip the undo system",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the inserted text."
            }
          ]
        },
        {
          "name": "insert",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L585",
          "visibility": "Public",
          "summary": "Insert text at the given position.",
          "description": "Insert text at the given position.",
          "arguments": [
            {
              "name": "position",
              "description": "A {Point} representing the insertion location. The position is clipped before insertion.",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "text",
              "description": "A {String} representing the text to insert.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "normalizeLineEndings",
                  "description": "{Boolean} (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "undo",
                  "description": "{String} 'skip' will skip the undo system",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the inserted text."
            }
          ]
        },
        {
          "name": "append",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L596",
          "visibility": "Public",
          "summary": "Append text to the end of the buffer.",
          "description": "Append text to the end of the buffer.",
          "arguments": [
            {
              "name": "text",
              "description": "A {String} representing the text text to append.",
              "type": "String",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "normalizeLineEndings",
                  "description": "{Boolean} (default: true)",
                  "type": "Boolean",
                  "isOptional": true
                },
                {
                  "name": "undo",
                  "description": "{String} 'skip' will skip the undo system",
                  "type": "String",
                  "isOptional": true
                }
              ],
              "name": "options",
              "description": "{Object}",
              "type": "Object",
              "isOptional": true
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the inserted text"
            }
          ]
        },
        {
          "name": "delete",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L668",
          "visibility": "Public",
          "summary": "Delete the text in the given range.",
          "description": "Delete the text in the given range.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} in which to delete. The range is clipped before deleting.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns an empty {Range} starting at the start of deleted range."
            }
          ]
        },
        {
          "name": "deleteRow",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L676",
          "visibility": "Public",
          "summary": "Delete the line associated with a specified row.",
          "description": "Delete the line associated with a specified row.",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} representing the 0-indexed row to delete.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the deleted text."
            }
          ]
        },
        {
          "name": "deleteRows",
          "sectionName": "Mutating Text",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L688",
          "visibility": "Public",
          "summary": "Delete the lines associated with the specified row range.",
          "description": "Delete the lines associated with the specified row range.\n\nIf the row range is out of bounds, it will be clipped. If the startRow is\ngreater than the end row, they will be reordered.",
          "arguments": [
            {
              "name": "startRow",
              "description": "A {Number} representing the first row to delete.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "endRow",
              "description": "A {Number} representing the last row to delete, inclusive.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the {Range} of the deleted text."
            }
          ]
        },
        {
          "name": "markRange",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L744",
          "visibility": "Public",
          "summary": "Create a marker with the given range. This marker will maintain\nits logical location as the buffer is changed, so if you mark a particular\nword, the marker will remain over that word even if the word's location in\nthe buffer changes.",
          "description": "Create a marker with the given range. This marker will maintain\nits logical location as the buffer is changed, so if you mark a particular\nword, the marker will remain over that word even if the word's location in\nthe buffer changes.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array}",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "reversed",
                  "description": "Creates the marker in a reversed orientation. (default: false)",
                  "type": null,
                  "isOptional": true
                },
                {
                  "name": "persistent",
                  "description": "Whether to include this marker when serializing the buffer. (default: true)",
                  "type": null,
                  "isOptional": true
                },
                {
                  "name": "invalidate",
                  "description": "Determines the rules by which changes to the buffer *invalidate* the marker. (default: 'overlap') It can be any of the following strategies, in order of fragility\n* __never__: The marker is never marked as invalid. This is a good choice for\n  markers representing selections in an editor.\n* __surround__: The marker is invalidated by changes that completely surround it.\n* __overlap__: The marker is invalidated by changes that surround the\n  start or end of the marker. This is the default.\n* __inside__: The marker is invalidated by changes that extend into the\n  inside of the marker. Changes that end at the marker's start or\n  start at the marker's end do not invalidate the marker.\n* __touch__: The marker is invalidated by a change that touches the marked\n  region in any way, including changes that end at the marker's\n  start or start at the marker's end. This is the most fragile strategy.",
                  "type": null,
                  "isOptional": true
                }
              ],
              "name": "properties",
              "description": "A hash of key-value pairs to associate with the marker. There are also reserved property names that have marker-specific meaning.",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Marker",
              "description": "Returns a {Marker}."
            }
          ]
        },
        {
          "name": "markPosition",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L752",
          "visibility": "Public",
          "summary": "Create a marker at the given position with no tail.",
          "description": "Create a marker at the given position with no tail.",
          "arguments": [
            {
              "name": "position",
              "description": "{Point} or point-compatible {Array}",
              "type": "Point",
              "isOptional": false
            },
            {
              "name": "properties",
              "description": "This is the same as the `properties` parameter in {::markRange}",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Marker",
              "description": "Returns a {Marker}."
            }
          ]
        },
        {
          "name": "getMarkers",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L757",
          "visibility": "Public",
          "summary": "Get all existing markers on the buffer.",
          "description": "Get all existing markers on the buffer.",
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Marker}s."
            }
          ]
        },
        {
          "name": "getMarker",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L764",
          "visibility": "Public",
          "summary": "Get an existing marker by its id.",
          "description": "Get an existing marker by its id.",
          "arguments": [
            {
              "name": "id",
              "description": "{Number} id of the marker to retrieve",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Marker",
              "description": "Returns a {Marker}."
            }
          ]
        },
        {
          "name": "findMarkers",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L784",
          "visibility": "Public",
          "summary": "Find markers conforming to the given parameters.",
          "description": "Find markers conforming to the given parameters.\n\nMarkers are sorted based on their position in the buffer. If two markers\nstart at the same position, the larger marker comes first.",
          "arguments": [
            {
              "children": [
                {
                  "name": "startPosition",
                  "description": "Only include markers that start at the given {Point}.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "endPosition",
                  "description": "Only include markers that end at the given {Point}.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "containsPoint",
                  "description": "Only include markers that contain the given {Point}, inclusive.",
                  "type": "Point",
                  "isOptional": false
                },
                {
                  "name": "containsRange",
                  "description": "Only include markers that contain the given {Range}, inclusive.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "startRow",
                  "description": "Only include markers that start at the given row {Number}.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "endRow",
                  "description": "Only include markers that end at the given row {Number}.",
                  "type": "Number",
                  "isOptional": false
                },
                {
                  "name": "intersectsRow",
                  "description": "Only include markers that intersect the given row {Number}.",
                  "type": "Number",
                  "isOptional": false
                }
              ],
              "name": "params",
              "description": "A hash of key-value pairs constraining the set of returned markers. You can query against custom marker properties by listing the desired key-value pairs here. In addition, the following keys are reserved and have special semantics:",
              "type": null,
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Array",
              "description": "Returns an {Array} of {Marker}s."
            }
          ]
        },
        {
          "name": "getMarkerCount",
          "sectionName": "Markers",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L789",
          "visibility": "Public",
          "summary": "Get the number of markers in the buffer.",
          "description": "Get the number of markers in the buffer.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "undo",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L799",
          "visibility": "Public",
          "summary": "Undo the last operation. If a transaction is in progress, aborts it. ",
          "description": "Undo the last operation. If a transaction is in progress, aborts it. "
        },
        {
          "name": "redo",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L807",
          "visibility": "Public",
          "summary": "Redo the last operation ",
          "description": "Redo the last operation "
        },
        {
          "name": "transact",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L827",
          "visibility": "Public",
          "summary": "Batch multiple operations as a single undo/redo step.",
          "description": "Batch multiple operations as a single undo/redo step.\n\nAny group of operations that are logically grouped from the perspective of\nundoing and redoing should be performed in a transaction. If you want to\nabort the transaction, call {::abortTransaction} to terminate the function's\nexecution and revert any changes performed up to the abortion.",
          "arguments": [
            {
              "name": "groupingInterval",
              "description": "The {Number} of milliseconds for which this transaction should be considered 'open for grouping' after it begins. If a transaction with a positive `groupingInterval` is committed while the previous transaction is still open for grouping, the two transactions are merged with respect to undo and redo.",
              "type": "Number",
              "isOptional": true
            },
            {
              "name": "fn",
              "description": "A {Function} to call inside the transaction. ",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "clearUndoStack",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L856",
          "visibility": "Public",
          "summary": "Clear the undo stack. ",
          "description": "Clear the undo stack. "
        },
        {
          "name": "createCheckpoint",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L862",
          "visibility": "Public",
          "summary": "Create a pointer to the current state of the buffer for use\nwith {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.",
          "description": "Create a pointer to the current state of the buffer for use\nwith {::revertToCheckpoint} and {::groupChangesSinceCheckpoint}.",
          "returnValues": [
            {
              "type": null,
              "description": "Returns a checkpoint value."
            }
          ]
        },
        {
          "name": "revertToCheckpoint",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L874",
          "visibility": "Public",
          "summary": "Revert the buffer to the state it was in when the given\ncheckpoint was created.",
          "description": "Revert the buffer to the state it was in when the given\ncheckpoint was created.\n\nThe redo stack will be empty following this operation, so changes since the\ncheckpoint will be lost. If the given checkpoint is no longer present in the\nundo history, no changes will be made to the buffer and this method will\nreturn `false`.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the operation succeeded."
            }
          ]
        },
        {
          "name": "groupChangesSinceCheckpoint",
          "sectionName": "History",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L891",
          "visibility": "Public",
          "summary": "Group all changes since the given checkpoint into a single\ntransaction for purposes of undo/redo.",
          "description": "Group all changes since the given checkpoint into a single\ntransaction for purposes of undo/redo.\n\nIf the given checkpoint is no longer present in the undo history, no\ngrouping will be performed and this method will return `false`.",
          "returnValues": [
            {
              "type": "Boolean",
              "description": "Returns a {Boolean} indicating whether the operation succeeded."
            }
          ]
        },
        {
          "name": "scan",
          "sectionName": "Search And Replace",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L912",
          "visibility": "Public",
          "summary": "Scan regular expression matches in the entire buffer, calling the\ngiven iterator function on each match.",
          "description": "Scan regular expression matches in the entire buffer, calling the\ngiven iterator function on each match.\n\nIf you're programmatically modifying the results, you may want to try\n{::backwardsScan} to avoid tripping over your own changes.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "match",
                  "description": "The current regular expression match.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "matchText",
                  "description": "A {String} with the text of the match.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "range",
                  "description": "The {Range} of the match.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "stop",
                  "description": "Call this {Function} to terminate the scan.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "replace",
                  "description": "Call this {Function} with a {String} to replace the match. ",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} that's called on each match with an {Object} containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "backwardsScan",
          "sectionName": "Search And Replace",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L929",
          "visibility": "Public",
          "summary": "Scan regular expression matches in the entire buffer in reverse\norder, calling the given iterator function on each match.",
          "description": "Scan regular expression matches in the entire buffer in reverse\norder, calling the given iterator function on each match.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "match",
                  "description": "The current regular expression match.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "matchText",
                  "description": "A {String} with the text of the match.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "range",
                  "description": "The {Range} of the match.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "stop",
                  "description": "Call this {Function} to terminate the scan.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "replace",
                  "description": "Call this {Function} with a {String} to replace the match. ",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} that's called on each match with an {Object} containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "scanInRange",
          "sectionName": "Search And Replace",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L947",
          "visibility": "Public",
          "summary": "Scan regular expression matches in a given range , calling the given\niterator function on each match.",
          "description": "Scan regular expression matches in a given range , calling the given\niterator function on each match.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "name": "range",
              "description": "A {Range} in which to search.",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "match",
                  "description": "The current regular expression match.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "matchText",
                  "description": "A {String} with the text of the match.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "range",
                  "description": "The {Range} of the match.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "stop",
                  "description": "Call this {Function} to terminate the scan.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "replace",
                  "description": "Call this {Function} with a {String} to replace the match. ",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} that's called on each match with an {Object} containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "backwardsScanInRange",
          "sectionName": "Search And Replace",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L998",
          "visibility": "Public",
          "summary": "Scan regular expression matches in a given range in reverse order,\ncalling the given iterator function on each match.",
          "description": "Scan regular expression matches in a given range in reverse order,\ncalling the given iterator function on each match.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} to search for.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "name": "range",
              "description": "A {Range} in which to search.",
              "type": "Range",
              "isOptional": false
            },
            {
              "children": [
                {
                  "name": "match",
                  "description": "The current regular expression match.",
                  "type": null,
                  "isOptional": false
                },
                {
                  "name": "matchText",
                  "description": "A {String} with the text of the match.",
                  "type": "String",
                  "isOptional": false
                },
                {
                  "name": "range",
                  "description": "The {Range} of the match.",
                  "type": "Range",
                  "isOptional": false
                },
                {
                  "name": "stop",
                  "description": "Call this {Function} to terminate the scan.",
                  "type": "Function",
                  "isOptional": false
                },
                {
                  "name": "replace",
                  "description": "Call this {Function} with a {String} to replace the match. ",
                  "type": "Function",
                  "isOptional": false
                }
              ],
              "name": "iterator",
              "description": "A {Function} that's called on each match with an {Object} containing the following keys:",
              "type": "Function",
              "isOptional": false
            }
          ]
        },
        {
          "name": "replace",
          "sectionName": "Search And Replace",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1007",
          "visibility": "Public",
          "summary": "Replace all regular expression matches in the entire buffer.",
          "description": "Replace all regular expression matches in the entire buffer.",
          "arguments": [
            {
              "name": "regex",
              "description": "A {RegExp} representing the matches to be replaced.",
              "type": "RegExp",
              "isOptional": false
            },
            {
              "name": "replacementText",
              "description": "A {String} representing the text to replace each match.",
              "type": "String",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number} representing the number of replacements made."
            }
          ]
        },
        {
          "name": "getRange",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1057",
          "visibility": "Public",
          "summary": "Get the range spanning from `[0, 0]` to {::getEndPosition}.",
          "description": "Get the range spanning from `[0, 0]` to {::getEndPosition}.",
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "getLineCount",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1063",
          "visibility": "Public",
          "summary": "Get the number of lines in the buffer.",
          "description": "Get the number of lines in the buffer.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "getLastRow",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1069",
          "visibility": "Public",
          "summary": "Get the last 0-indexed row in the buffer.",
          "description": "Get the last 0-indexed row in the buffer.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "getFirstPosition",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1075",
          "visibility": "Public",
          "summary": "Get the first position in the buffer, which is always `[0, 0]`.",
          "description": "Get the first position in the buffer, which is always `[0, 0]`.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "getEndPosition",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1082",
          "visibility": "Public",
          "summary": "Get the maximal position in the buffer, where new text would be\nappended.",
          "description": "Get the maximal position in the buffer, where new text would be\nappended.",
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "getMaxCharacterIndex",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1089",
          "visibility": "Public",
          "summary": "Get the length of the buffer in characters.",
          "description": "Get the length of the buffer in characters.",
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "rangeForRow",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1100",
          "visibility": "Public",
          "summary": "Get the range for the given row",
          "description": "Get the range for the given row",
          "arguments": [
            {
              "name": "row",
              "description": "A {Number} representing a 0-indexed row.",
              "type": "Number",
              "isOptional": false
            },
            {
              "name": "includeNewline",
              "description": "A {Boolean} indicating whether or not to include the newline, which results in a range that extends to the start of the next line.",
              "type": "Boolean",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns a {Range}."
            }
          ]
        },
        {
          "name": "characterIndexForPosition",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1119",
          "visibility": "Public",
          "summary": "Convert a position in the buffer in row/column coordinates to an\nabsolute character offset, inclusive of line ending characters.",
          "description": "Convert a position in the buffer in row/column coordinates to an\nabsolute character offset, inclusive of line ending characters.\n\nThe position is clipped prior to translating.",
          "arguments": [
            {
              "name": "position",
              "description": "A {Point}.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Number",
              "description": "Returns a {Number}."
            }
          ]
        },
        {
          "name": "positionForCharacterIndex",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1136",
          "visibility": "Public",
          "summary": "Convert an absolute character offset, inclusive of newlines, to a\nposition in the buffer in row/column coordinates.",
          "description": "Convert an absolute character offset, inclusive of newlines, to a\nposition in the buffer in row/column coordinates.\n\nThe offset is clipped prior to translating.",
          "arguments": [
            {
              "name": "offset",
              "description": "A {Number}.",
              "type": "Number",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a {Point}."
            }
          ]
        },
        {
          "name": "clipRange",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1155",
          "visibility": "Public",
          "summary": "Clip the given range so it starts and ends at valid positions.",
          "description": "Clip the given range so it starts and ends at valid positions.\n\nFor example, the position `[1, 100]` is out of bounds if the line at row 1 is\nonly 10 characters long, and it would be clipped to `(1, 10)`.",
          "arguments": [
            {
              "name": "range",
              "description": "A {Range} or range-compatible {Array} to clip.",
              "type": "Range",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Range",
              "description": "Returns the given {Range} if it is already in bounds, or a new clipped\n{Range} if the given range is out-of-bounds."
            }
          ]
        },
        {
          "name": "clipPosition",
          "sectionName": "Buffer Range Details",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1173",
          "visibility": "Public",
          "summary": "Clip the given point so it is at a valid position in the buffer.",
          "description": "Clip the given point so it is at a valid position in the buffer.\n\nFor example, the position (1, 100) is out of bounds if the line at row 1 is\nonly 10 characters long, and it would be clipped to (1, 10)",
          "arguments": [
            {
              "name": "position",
              "description": "A {Point} or point-compatible {Array}.",
              "type": "Point",
              "isOptional": false
            }
          ],
          "returnValues": [
            {
              "type": "Point",
              "description": "Returns a new {Point} if the given position is invalid, otherwise returns\nthe given position."
            }
          ]
        },
        {
          "name": "save",
          "sectionName": "Buffer Operations",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1193",
          "visibility": "Public",
          "summary": "Save the buffer. ",
          "description": "Save the buffer. "
        },
        {
          "name": "saveAs",
          "sectionName": "Buffer Operations",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1199",
          "visibility": "Public",
          "summary": "Save the buffer at a specific path.",
          "description": "Save the buffer at a specific path.",
          "arguments": [
            {
              "name": "filePath",
              "description": "The path to save at. ",
              "type": null,
              "isOptional": false
            }
          ]
        },
        {
          "name": "reload",
          "sectionName": "Buffer Operations",
          "srcUrl": "https://github.com/atom/text-buffer\\blob\\v6.0.0\\src\\text-buffer.coffee#L1215",
          "visibility": "Public",
          "summary": "Reload the buffer's contents from disk.",
          "description": "Reload the buffer's contents from disk.\n\nSets the buffer's content to the cached disk contents "
        }
      ],
      "classProperties": [],
      "instanceProperties": [],
      "visibility": "Extended",
      "summary": "A mutable text container with undo/redo support and the ability to\nannotate logical regions in the text. ",
      "description": "A mutable text container with undo/redo support and the ability to\nannotate logical regions in the text. "
    }
  }
}