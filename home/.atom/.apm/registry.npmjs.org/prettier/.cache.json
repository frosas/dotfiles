{"_id":"prettier","_rev":"6-8a4570a380573007c0b6106d7ca9a7bd","name":"prettier","description":"Prettier is an opinionated JavaScript formatter inspired by [refmt](https://facebook.github.io/reason/tools.html) with advanced support for language features from ES2017, JSX, and Flow. It removes all original styling and ensures that all outputted JavaSc","dist-tags":{"latest":"0.0.5"},"versions":{"0.0.1":{"name":"prettier","version":"0.0.1","bin":{"prettier":"./bin/prettier"},"main":"./index.js","dependencies":{"ast-types":"git+https://github.com/jlongster/ast-types.git","babylon":"git+https://github.com/jlongster/babylon.git#published","minimist":"^1.2.0","recast":"^0.11.18","flow-parser":"^0.37.0"},"devDependencies":{"jest":"^18.0.0"},"scripts":{"test":"jest","format":"./bin/prettier --write src/printer.js"},"jest":{"setupFiles":["<rootDir>/tests_config/run_spec.js"],"testRegex":["jsfmt\\.spec\\.js$"],"testPathIgnorePatterns":["tests/new_react","tests/more_react"]},"gitHead":"79e222bb53aa8e82e6bdc2f2c6e65f687f441a41","description":"This is a JavaScript pretty-printer that is opinionated. All it takes is a width to format the code to and it does the rest. Zero config: it just works! Integrate this into your editor to get immediate feedback, or run it across an entire project to forma","_id":"prettier@0.0.1","_shasum":"895b88f216002cce8fa16d69a0e96c622abcb9a8","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"jlongster","email":"longster@gmail.com"},"maintainers":[{"name":"jlongster","email":"longster@gmail.com"}],"dist":{"shasum":"895b88f216002cce8fa16d69a0e96c622abcb9a8","tarball":"https://registry.npmjs.org/prettier/-/prettier-0.0.1.tgz"},"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/prettier-0.0.1.tgz_1484019938435_0.3656923684757203"},"directories":{}},"0.0.2":{"name":"prettier","version":"0.0.2","bin":{"prettier":"./bin/prettier"},"main":"./index.js","dependencies":{"ast-types":"git+https://github.com/jlongster/ast-types.git","babylon":"git+https://github.com/jlongster/babylon.git#published","minimist":"^1.2.0","recast":"^0.11.18","flow-parser":"^0.37.0"},"devDependencies":{"jest":"^18.0.0"},"scripts":{"test":"jest","format":"./bin/prettier --write src/printer.js"},"jest":{"setupFiles":["<rootDir>/tests_config/run_spec.js"],"testRegex":["jsfmt\\.spec\\.js$"],"testPathIgnorePatterns":["tests/new_react","tests/more_react"]},"gitHead":"dd8dda101d7dd7acf3ee6765028c2ec20ef06445","description":"This is a JavaScript pretty-printer that is opinionated. All it takes is a width to format the code to and it does the rest. Zero config: it just works! Integrate this into your editor to get immediate feedback, or run it across an entire project to forma","_id":"prettier@0.0.2","_shasum":"5c2145cba268b3fe73b351220b74ec4360a17b81","_from":".","_npmVersion":"3.10.8","_nodeVersion":"6.9.1","_npmUser":{"name":"jlongster","email":"longster@gmail.com"},"maintainers":[{"name":"jlongster","email":"longster@gmail.com"}],"dist":{"shasum":"5c2145cba268b3fe73b351220b74ec4360a17b81","tarball":"https://registry.npmjs.org/prettier/-/prettier-0.0.2.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/prettier-0.0.2.tgz_1484022685916_0.3416756526567042"},"directories":{}},"0.0.3":{"name":"prettier","version":"0.0.3","bin":{"prettier":"./bin/prettier"},"main":"./index.js","dependencies":{"ast-types":"git+https://github.com/jlongster/ast-types.git","babylon":"git+https://github.com/jlongster/babylon.git#published","minimist":"^1.2.0","recast":"^0.11.18","flow-parser":"^0.37.0"},"devDependencies":{"jest":"^18.0.0"},"scripts":{"test":"jest","format":"./bin/prettier --write src/printer.js"},"jest":{"setupFiles":["<rootDir>/tests_config/run_spec.js"],"testRegex":"jsfmt\\.spec\\.js$","testPathIgnorePatterns":["tests/new_react","tests/more_react"]},"gitHead":"6d6d53f6df5069765ce0a08a4a1ee9ebe38f4b83","description":"Prettier is an opinionated JavaScript formatter inspired by [refmt](https://facebook.github.io/reason/tools.html) with advanced support for language features from ES2017, JSX, and Flow. It removes all original styling and ensures that all outputted JavaSc","_id":"prettier@0.0.3","_shasum":"4ad540754376b5b3e725c63b2ac160afed38b908","_from":".","_npmVersion":"2.15.11","_nodeVersion":"4.7.2","_npmUser":{"name":"jlongster","email":"longster@gmail.com"},"maintainers":[{"name":"jlongster","email":"longster@gmail.com"}],"dist":{"shasum":"4ad540754376b5b3e725c63b2ac160afed38b908","tarball":"https://registry.npmjs.org/prettier/-/prettier-0.0.3.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/prettier-0.0.3.tgz_1484068730034_0.18275881372392178"},"directories":{}},"0.0.4":{"name":"prettier","version":"0.0.4","bin":{"prettier":"./bin/prettier.js"},"main":"./index.js","dependencies":{"ast-types":"git+https://github.com/jlongster/ast-types.git","babylon":"^6.15.0","flow-parser":"^0.37.0","minimist":"^1.2.0","private":"^0.1.6","recast":"^0.11.18","source-map":"^0.5.6"},"devDependencies":{"jest":"^18.0.0"},"scripts":{"test":"jest","format":"./bin/prettier.js --write","format:single":"npm run format -- src/printer.js","format:all":"npm run format -- src/*.js bin/*.js"},"jest":{"setupFiles":["<rootDir>/tests_config/run_spec.js"],"testRegex":"jsfmt\\.spec\\.js$","testPathIgnorePatterns":["tests/new_react","tests/more_react"]},"gitHead":"b37e8c4b361acbe08e716f0aa71f29b4b55fcb5b","description":"Prettier is an opinionated JavaScript formatter inspired by [refmt](https://facebook.github.io/reason/tools.html) with advanced support for language features from ES2017, JSX, and Flow. It removes all original styling and ensures that all outputted JavaSc","_id":"prettier@0.0.4","_shasum":"4eb417a87dfe8de4165393c95af835502ddc04ac","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.9.4","_npmUser":{"name":"jlongster","email":"longster@gmail.com"},"maintainers":[{"name":"jlongster","email":"longster@gmail.com"}],"dist":{"shasum":"4eb417a87dfe8de4165393c95af835502ddc04ac","tarball":"https://registry.npmjs.org/prettier/-/prettier-0.0.4.tgz"},"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/prettier-0.0.4.tgz_1484110370079_0.24725238978862762"},"directories":{}},"0.0.5":{"name":"prettier","version":"0.0.5","bin":{"prettier":"./bin/prettier.js"},"main":"./index.js","dependencies":{"ast-types":"git+https://github.com/jlongster/ast-types.git","babylon":"^6.15.0","flow-parser":"^0.37.0","get-stdin":"^5.0.1","minimist":"^1.2.0","private":"^0.1.6","recast":"^0.11.18","source-map":"^0.5.6"},"devDependencies":{"jest":"^18.0.0"},"scripts":{"test":"jest","format":"./bin/prettier.js --write","format:single":"npm run format -- src/printer.js","format:all":"npm run format -- src/*.js bin/*.js"},"jest":{"setupFiles":["<rootDir>/tests_config/run_spec.js"],"testRegex":"jsfmt\\.spec\\.js$","testPathIgnorePatterns":["tests/new_react","tests/more_react"]},"gitHead":"e1da3b54e3fa43885a5dfddce28fa7921804a855","description":"Prettier is an opinionated JavaScript formatter inspired by [refmt](https://facebook.github.io/reason/tools.html) with advanced support for language features from ES2017, JSX, and Flow. It removes all original styling and ensures that all outputted JavaSc","_id":"prettier@0.0.5","_shasum":"9f3a67b57e5836d925e7038ea841580915c039eb","_from":".","_npmVersion":"3.10.10","_nodeVersion":"6.9.4","_npmUser":{"name":"jlongster","email":"longster@gmail.com"},"maintainers":[{"name":"jlongster","email":"longster@gmail.com"}],"dist":{"shasum":"9f3a67b57e5836d925e7038ea841580915c039eb","tarball":"https://registry.npmjs.org/prettier/-/prettier-0.0.5.tgz"},"_npmOperationalInternal":{"host":"packages-18-east.internal.npmjs.com","tmp":"tmp/prettier-0.0.5.tgz_1484153706586_0.7991732200607657"},"directories":{}}},"readme":"# Prettier\n\nPrettier is an opinionated JavaScript formatter inspired by\n[refmt](https://facebook.github.io/reason/tools.html) with advanced\nsupport for language features from ES2017, JSX, and Flow. It removes\nall original styling and ensures that all outputted JavaScript\nconforms to a consistent style. (See this [blog post](http://jlongster.com/A-Prettier-Formatter))\n\n*Warning*: This is a beta, and the format may change over time. If you\n aren't OK with the format changing, wait for a more stable version.\n\nThis goes way beyond [eslint](http://eslint.org/) and other projects\n[built on it](https://github.com/feross/standard). Unlike eslint,\nthere aren't a million configuration options and rules. But more\nimportantly: **everything is fixable**. This works because prettier\nnever \"checks\" anything; it takes JavaScript as input and outputs the\nformatted JavaScript as output.\n\nIn technical terms: prettier parses your JavaScript into an AST and\npretty-prints the AST, completely ignoring any of the original\nformatting. Say hello to completely consistent syntax!\n\nThere's an extremely important piece missing from existing styling\ntools: **the maximum line length**. Sure, you can tell eslint to warn\nyou when you have a line that's too long, but that's an after-thought\n(eslint *never* knows how to fix it). The maximum line length is a\ncritical piece the formatter needs for laying out and wrapping code.\n\nFor example, take the following code:\n\n```js\nfoo(arg1, arg2, arg3);\n```\n\nThat looks like the right way to format it. However, we've all run\ninto this situation:\n\n```js\nfoo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());\n```\n\nSuddenly our previous format for calling function breaks down because\nthis is too long. What you would probably do is this instead:\n\n```js\nfoo(\n  reallyLongArg(),\n  omgSoManyParameters(),\n  IShouldRefactorThis(),\n  isThereSeriouslyAnotherOne()\n);\n```\n\nThis clearly shows that the maximum line length has a direct impact on\nthe style of code we desire. The fact that current style tools ignore\nthis means they can't really help with the situations that are\nactually the most troublesome. Individuals on teams will all format\nthese differently according to their own rules and we lose the\nconsistency we sought after.\n\nEven if we disregard line widths, it's too easy to sneak in various\nstyles of code in all other linters. The most strict linter I know\nhappily lets all these styles happen:\n\n```js\nfoo({ num: 3 },\n  1, 2)\n\nfoo(\n  { num: 3 },\n  1, 2)\n\nfoo(\n  { num: 3 },\n  1,\n  2\n)\n```\n\nPrettier bans all custom styling by parsing it away and re-printing\nthe parsed AST with its own rules that take the maximum line width\ninto account, wrapping code when necessary.\n\n## Usage\n\nInstall:\n\n```\nyarn add prettier\n```\n\nYou can install it globally if you like:\n\n```\nyarn global add prettier\n```\n\n*We're defaulting to `yarn` but you can use `npm` if you like:*\n\n```\nnpm install [-g] prettier\n```\n\n### CLI\n\nRun prettier through the CLI with this script. Run it without any\narguments to see the options.\n\nTo format a file in-place, use `--write`. While this is in beta you\nshould probably commit your code before doing that.\n\n```js\nprettier [opts] [filename ...]\n```\n\nFor example, you could format your source using bash filename expansion:\n```bash\nprettier --write src/**/*.js bin/*.js\n```\n\nIn the future we will have better support for formatting whole projects.\n\n### API\n\nThe API is a single function exported as `format`. The options\nargument is optional, and all of the defaults are shown below:\n\n```js\nconst prettier = require(\"prettier\");\n\nprettier.format(source, {\n  // Fit code within this line limit\n  printWidth: 80,\n\n  // Number of spaces it should use per tab\n  tabWidth: 2,\n\n  // Use the flow parser instead of babylon\n  useFlowParser: false,\n\n  // If true, will use single instead of double quotes\n  singleQuote: false,\n\n  // Controls the printing of trailing commas wherever possible\n  trailingComma: false,\n\n  // Controls the printing of spaces inside array and objects\n  bracketSpacing: true\n});\n```\n\n### Atom\n\nAtom users can simply install the `prettier-atom` package and use\nctrl+alt+f to format a file (or format on save if turned on).\n\n### Emacs\n\nEmacs users should see [this\nfolder](https://github.com/jlongster/prettier/tree/master/editors/emacs)\nfor on-demand formatting.\n\n### Vim\n\nVim users can add the following to their `.vimrc`:\n\n```\nautocmd FileType javascript set formatprg=prettier\\ --stdin\n```\n\nThis makes Prettier power the [`gq` command](http://vimdoc.sourceforge.net/htmldoc/change.html#gq)\nfor automatic formatting without any plugins.\n\nMore editors are coming soon.\n\n## Language Support\n\nPrettier attempts to support all JavaScript language features,\nincluding non-standardized ones. By default it uses the\n[babylon](https://github.com/babel/babylon) parser with all language\nfeatures enabled, but you can also use\n[flow](https://github.com/facebook/flow) parser with the\n`useFlowParser` API or `--flow-parser` CLI option.\n\nAll of JSX and Flow syntax is supported. In fact, the test suite in\n`tests` *is* the entire Flow test suite and they all pass.\n\n## Technical Details\n\nThis printer is a fork of\n[recast](https://github.com/benjamn/recast)'s printer with it's\nalgorithm replaced by the one described by Wadler in \"[A prettier\nprinter](http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf)\".\nThere still may be leftover code from recast that needs to be cleaned\nup.\n\nThe basic idea is that the printer takes an AST and returns an\nintermediate representation of the output, and the printer uses that\nto generate a string. The advantage is that the printer can \"measure\"\nthe IR and see if the output is going to fit on a line, and break if\nnot.\n\nThis means that most of the logic of printing an AST involves\ngenerating an abstract representation of the output involving certain\ncommands. For example, `concat([\"(\", line, arg, line \")\"])` would\nrepresent a concatentation of opening parens, an argument, and closing\nparens. But if that doesn't fit on one line, the printer can break\nwhere `line` is specified.\n\nMore (rough) details can be found in [commands.md](commands.md).\nBetter docs will come soon.\n\n## Contributing\n\nWe will work on better docs over time, but in the mean time, here are\na few notes if you are interested in contributing:\n\n* You should be able to get up and running with just `yarn`\n* This uses jest snapshots for tests. The entire Flow test suite is\n  included here and you can make changes and run `jest -u` and then\n  `git diff` to see the styles that changed. Always update the\n  snapshots if opening a PR.\n* If you can, look at [commands.md](commands.md) and check out\n  [Wadler's\n  paper](http://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf)\n  to understand how this works. I will try to write a better explanation soon.\n* I haven't set up any automated tests yet, but for now as long as you\n  run `jest -u` to update the snapshots and I see them in the PR, that's fine.\n* You can run `AST_COMPARE=1 jest` for a more robust test run. That\n  formats each file, re-parses it, and compares the new AST with the\n  original one and makes sure they are semantically equivalent.\n","maintainers":[{"name":"jlongster","email":"longster@gmail.com"}],"time":{"modified":"2017-01-11T16:55:07.338Z","created":"2017-01-10T03:45:38.963Z","0.0.1":"2017-01-10T03:45:38.963Z","0.0.2":"2017-01-10T04:31:28.120Z","0.0.3":"2017-01-10T17:18:52.417Z","0.0.4":"2017-01-11T04:52:50.871Z","0.0.5":"2017-01-11T16:55:07.338Z"},"readmeFilename":"README.md","users":{"davidazullo":true},"_attachments":{},"_etag":"W/\"5876636b-3d86\"","_lastModified":"Wed, 11 Jan 2017 16:55:07 GMT"}