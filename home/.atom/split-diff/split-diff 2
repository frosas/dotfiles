var type = function(o) {
    var actualType = Object.prototype.toString.call(o);
    return actualType.substr(8).replace(']', '');
};

function undefined(obj) {
    return (type(obj) == 'Undefined');
}

var KeyValueTransformer = function(f, k) {
    var fieldSeparator = f;
    var kvSeparator = k;

    function toJson(kvpairs) {
        var json = {};
        kvpairs.split(fieldSeparator).forEach(function(s) {
            var kv = s.split(kvSeparator).map(function(s1) {
                return s1.trim();
            });
            var key = kv.shift();
            json[key] = kv.reduce(function(a, b) { return a + ' ' + b;})
        });
        return json;
    }

    this.handle = function(data) {
        return toJson(data);
    }
};

var kvTransformer = new KeyValueTransformer(';', '=');
var BloomFilter = require('bloomfilter').BloomFilter;

const memBefore = process.memoryUsage().rss;

var bloom = new BloomFilter(
    // 10000000000,
    Math.pow(2, )
    16
);

console.log((process.memoryUsage().rss - memBefore) / 1024 / 1024);

return;

const test = key => console.log(`${key} => ${bloom.test(key)}`);
const add = key => { console.log(`Adding ${key}`); bloom.add(key); };

add('c');
test('z');

return;

var args = require('minimist')(process.argv);

var in_file = args['file'];
var do_bloom = args['bloom'];
if (undefined(in_file)) {
    throw Error('Please check the value of file');
}

var lineReader = require('readline').createInterface({ input: require('fs').createReadStream(in_file) });

lineReader.on('line', function (line) {
    if (line.trim().length > 0) {
        try {
            var obj = JSON.parse(line);
            var time = parseInt(obj.start);
            var rounded = time - (time % 300) + 300
            var cookie = kvTransformer.handle(decodeURIComponent(obj.reqHdr.cookie));
            var cesc = cookie.cesc;
            var MC1 = cookie.MC1;
            var eid = cookie.eid;
            if (cesc.trim().length != 0) {
                if (do_bloom) {
                    var key = cesc + rounded + MC1 + eid;
                    console.log(key);
                    if (!bloom.test(key)) {
                        bloom.add(key);
                        // console.log(JSON.stringify({g: MC1, e: eid, c: JSON.parse(decodeURIComponent(cesc)), t: rounded}));
                    }
                }
                else {
                    console.log(cesc);
                }
            }
        }
        catch (e) {
            //console.log(e);
        }
    }
});
