/* eslint-env browser, node */

var util = require('./util');

var cookies = module.exports;

/**
 * Sets a cookie
 *
 * @param {Object} params
 * @param {string} params.name The name of the cookie
 * @param {string} params.value The value to store
 * @param {string} [params.path]
 * @param {date} [params.expires]
 */
cookies.set = function (params) {
    var fields = [];
    var addField = function (key, value) { fields.push(key + '=' + value); };
    addField(encodeURIComponent(params.name), encodeURIComponent(params.value));
    if (params.domain) addField('domain', util.getCookieDomain(params.domain));
    if (params.path) addField('path', params.path);
    if (params.maxAge) params.expires = util.getDateFromNow(params.maxAge);
    if (params.expires) addField('expires', params.expires.toUTCString());
    document.cookie = fields.join(';');
};

/**
 * @see     https://confluence/pages/viewpage.action?pageId=518921678
 * @param   {String} str
 * @returns {String}
 */
function encodeMarketingLOBPackage(str) {
    return str.replace(/\%(?=\D)/g, function (match) {
        return encodeURIComponent(match);
    });
}

/**
 * @param {Object|string} params A list of params or the same as params.name
 * @param {string} params.name The name of the cookie
 * @param {string} [params.cookies] String containing the cookies or
 *     document.cookie by default.
 * @return {string|undefined} The value of the cookie or undefined if it
 *     doesn't exist
 */
cookies.get = function (params) {
    if (typeof params == 'string') params = {name: params};
    if (params.cookies == null) params.cookies = document.cookie;
    var cookies = params.cookies.split(';');
    for (var i = 0; i < cookies.length; i++) {
        // All these " *" are to trim without using trim() as IE8 doesn't
        // support it. Also, "=" is considered optional as IE8 still follows
        // the now obsolete RFC 2965.
        var matches = cookies[i].match(/ *([^=]*) *(= *(.*))? */);
        var cookieName = util.safeDecodeURIComponent(encodeMarketingLOBPackage(matches[1]));
        var cookieValue = matches[3] == null ? '' : util.safeDecodeURIComponent(encodeMarketingLOBPackage(matches[3]));
        if (cookieName === params.name) return cookieValue;
    }
};

cookies['delete'] = function (params) {
    this.set({
        name: params.name,
        value: '',
        path: params.path,
        expires: new Date(0)
    });
};
